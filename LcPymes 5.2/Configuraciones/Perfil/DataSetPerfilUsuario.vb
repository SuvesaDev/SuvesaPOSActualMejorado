'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSetPerfilUsuario
    Inherits DataSet
    
    Private tablePerfil_x_Usuario As Perfil_x_UsuarioDataTable
    
    Private tablePerfil As PerfilDataTable
    
    Private tableModulos As ModulosDataTable
    
    Private tablePerfil_x_Modulo As Perfil_x_ModuloDataTable
    
    Private tableModulos1 As Modulos1DataTable
    
    Private relationPerfilPerfil_x_Modulo As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Perfil_x_Usuario")) Is Nothing) Then
                Me.Tables.Add(New Perfil_x_UsuarioDataTable(ds.Tables("Perfil_x_Usuario")))
            End If
            If (Not (ds.Tables("Perfil")) Is Nothing) Then
                Me.Tables.Add(New PerfilDataTable(ds.Tables("Perfil")))
            End If
            If (Not (ds.Tables("Modulos")) Is Nothing) Then
                Me.Tables.Add(New ModulosDataTable(ds.Tables("Modulos")))
            End If
            If (Not (ds.Tables("Perfil_x_Modulo")) Is Nothing) Then
                Me.Tables.Add(New Perfil_x_ModuloDataTable(ds.Tables("Perfil_x_Modulo")))
            End If
            If (Not (ds.Tables("Modulos1")) Is Nothing) Then
                Me.Tables.Add(New Modulos1DataTable(ds.Tables("Modulos1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Perfil_x_Usuario As Perfil_x_UsuarioDataTable
        Get
            Return Me.tablePerfil_x_Usuario
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Perfil As PerfilDataTable
        Get
            Return Me.tablePerfil
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Modulos As ModulosDataTable
        Get
            Return Me.tableModulos
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Perfil_x_Modulo As Perfil_x_ModuloDataTable
        Get
            Return Me.tablePerfil_x_Modulo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Modulos1 As Modulos1DataTable
        Get
            Return Me.tableModulos1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSetPerfilUsuario = CType(MyBase.Clone,DataSetPerfilUsuario)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Perfil_x_Usuario")) Is Nothing) Then
            Me.Tables.Add(New Perfil_x_UsuarioDataTable(ds.Tables("Perfil_x_Usuario")))
        End If
        If (Not (ds.Tables("Perfil")) Is Nothing) Then
            Me.Tables.Add(New PerfilDataTable(ds.Tables("Perfil")))
        End If
        If (Not (ds.Tables("Modulos")) Is Nothing) Then
            Me.Tables.Add(New ModulosDataTable(ds.Tables("Modulos")))
        End If
        If (Not (ds.Tables("Perfil_x_Modulo")) Is Nothing) Then
            Me.Tables.Add(New Perfil_x_ModuloDataTable(ds.Tables("Perfil_x_Modulo")))
        End If
        If (Not (ds.Tables("Modulos1")) Is Nothing) Then
            Me.Tables.Add(New Modulos1DataTable(ds.Tables("Modulos1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePerfil_x_Usuario = CType(Me.Tables("Perfil_x_Usuario"),Perfil_x_UsuarioDataTable)
        If (Not (Me.tablePerfil_x_Usuario) Is Nothing) Then
            Me.tablePerfil_x_Usuario.InitVars
        End If
        Me.tablePerfil = CType(Me.Tables("Perfil"),PerfilDataTable)
        If (Not (Me.tablePerfil) Is Nothing) Then
            Me.tablePerfil.InitVars
        End If
        Me.tableModulos = CType(Me.Tables("Modulos"),ModulosDataTable)
        If (Not (Me.tableModulos) Is Nothing) Then
            Me.tableModulos.InitVars
        End If
        Me.tablePerfil_x_Modulo = CType(Me.Tables("Perfil_x_Modulo"),Perfil_x_ModuloDataTable)
        If (Not (Me.tablePerfil_x_Modulo) Is Nothing) Then
            Me.tablePerfil_x_Modulo.InitVars
        End If
        Me.tableModulos1 = CType(Me.Tables("Modulos1"),Modulos1DataTable)
        If (Not (Me.tableModulos1) Is Nothing) Then
            Me.tableModulos1.InitVars
        End If
        Me.relationPerfilPerfil_x_Modulo = Me.Relations("PerfilPerfil_x_Modulo")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSetPerfilUsuario"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSetPerfilUsuario.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePerfil_x_Usuario = New Perfil_x_UsuarioDataTable
        Me.Tables.Add(Me.tablePerfil_x_Usuario)
        Me.tablePerfil = New PerfilDataTable
        Me.Tables.Add(Me.tablePerfil)
        Me.tableModulos = New ModulosDataTable
        Me.Tables.Add(Me.tableModulos)
        Me.tablePerfil_x_Modulo = New Perfil_x_ModuloDataTable
        Me.Tables.Add(Me.tablePerfil_x_Modulo)
        Me.tableModulos1 = New Modulos1DataTable
        Me.Tables.Add(Me.tableModulos1)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("PerfilPerfil_x_Modulo", New DataColumn() {Me.tablePerfil.Id_PerfilColumn}, New DataColumn() {Me.tablePerfil_x_Modulo.Id_PerfilColumn})
        Me.tablePerfil_x_Modulo.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationPerfilPerfil_x_Modulo = New DataRelation("PerfilPerfil_x_Modulo", New DataColumn() {Me.tablePerfil.Id_PerfilColumn}, New DataColumn() {Me.tablePerfil_x_Modulo.Id_PerfilColumn}, false)
        Me.Relations.Add(Me.relationPerfilPerfil_x_Modulo)
    End Sub
    
    Private Function ShouldSerializePerfil_x_Usuario() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePerfil() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeModulos() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePerfil_x_Modulo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeModulos1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Perfil_x_UsuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As Perfil_x_UsuarioRowChangeEvent)
    
    Public Delegate Sub PerfilRowChangeEventHandler(ByVal sender As Object, ByVal e As PerfilRowChangeEvent)
    
    Public Delegate Sub ModulosRowChangeEventHandler(ByVal sender As Object, ByVal e As ModulosRowChangeEvent)
    
    Public Delegate Sub Perfil_x_ModuloRowChangeEventHandler(ByVal sender As Object, ByVal e As Perfil_x_ModuloRowChangeEvent)
    
    Public Delegate Sub Modulos1RowChangeEventHandler(ByVal sender As Object, ByVal e As Modulos1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Perfil_x_UsuarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Perfil As DataColumn
        
        Private columnId_Usuario As DataColumn
        
        Private columnId_PerUser As DataColumn
        
        Friend Sub New()
            MyBase.New("Perfil_x_Usuario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_PerfilColumn As DataColumn
            Get
                Return Me.columnId_Perfil
            End Get
        End Property
        
        Friend ReadOnly Property Id_UsuarioColumn As DataColumn
            Get
                Return Me.columnId_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property Id_PerUserColumn As DataColumn
            Get
                Return Me.columnId_PerUser
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Perfil_x_UsuarioRow
            Get
                Return CType(Me.Rows(index),Perfil_x_UsuarioRow)
            End Get
        End Property
        
        Public Event Perfil_x_UsuarioRowChanged As Perfil_x_UsuarioRowChangeEventHandler
        
        Public Event Perfil_x_UsuarioRowChanging As Perfil_x_UsuarioRowChangeEventHandler
        
        Public Event Perfil_x_UsuarioRowDeleted As Perfil_x_UsuarioRowChangeEventHandler
        
        Public Event Perfil_x_UsuarioRowDeleting As Perfil_x_UsuarioRowChangeEventHandler
        
        Public Overloads Sub AddPerfil_x_UsuarioRow(ByVal row As Perfil_x_UsuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPerfil_x_UsuarioRow(ByVal Id_Perfil As Integer, ByVal Id_Usuario As String) As Perfil_x_UsuarioRow
            Dim rowPerfil_x_UsuarioRow As Perfil_x_UsuarioRow = CType(Me.NewRow,Perfil_x_UsuarioRow)
            rowPerfil_x_UsuarioRow.ItemArray = New Object() {Id_Perfil, Id_Usuario, Nothing}
            Me.Rows.Add(rowPerfil_x_UsuarioRow)
            Return rowPerfil_x_UsuarioRow
        End Function
        
        Public Function FindById_PerUser(ByVal Id_PerUser As Integer) As Perfil_x_UsuarioRow
            Return CType(Me.Rows.Find(New Object() {Id_PerUser}),Perfil_x_UsuarioRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Perfil_x_UsuarioDataTable = CType(MyBase.Clone,Perfil_x_UsuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Perfil_x_UsuarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Perfil = Me.Columns("Id_Perfil")
            Me.columnId_Usuario = Me.Columns("Id_Usuario")
            Me.columnId_PerUser = Me.Columns("Id_PerUser")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Perfil = New DataColumn("Id_Perfil", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Perfil)
            Me.columnId_Usuario = New DataColumn("Id_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Usuario)
            Me.columnId_PerUser = New DataColumn("Id_PerUser", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_PerUser)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_PerUser}, true))
            Me.columnId_Perfil.AllowDBNull = false
            Me.columnId_Usuario.AllowDBNull = false
            Me.columnId_PerUser.AutoIncrement = true
            Me.columnId_PerUser.AllowDBNull = false
            Me.columnId_PerUser.ReadOnly = true
            Me.columnId_PerUser.Unique = true
        End Sub
        
        Public Function NewPerfil_x_UsuarioRow() As Perfil_x_UsuarioRow
            Return CType(Me.NewRow,Perfil_x_UsuarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Perfil_x_UsuarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Perfil_x_UsuarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Perfil_x_UsuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent Perfil_x_UsuarioRowChanged(Me, New Perfil_x_UsuarioRowChangeEvent(CType(e.Row,Perfil_x_UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Perfil_x_UsuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent Perfil_x_UsuarioRowChanging(Me, New Perfil_x_UsuarioRowChangeEvent(CType(e.Row,Perfil_x_UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Perfil_x_UsuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent Perfil_x_UsuarioRowDeleted(Me, New Perfil_x_UsuarioRowChangeEvent(CType(e.Row,Perfil_x_UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Perfil_x_UsuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent Perfil_x_UsuarioRowDeleting(Me, New Perfil_x_UsuarioRowChangeEvent(CType(e.Row,Perfil_x_UsuarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePerfil_x_UsuarioRow(ByVal row As Perfil_x_UsuarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Perfil_x_UsuarioRow
        Inherits DataRow
        
        Private tablePerfil_x_Usuario As Perfil_x_UsuarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePerfil_x_Usuario = CType(Me.Table,Perfil_x_UsuarioDataTable)
        End Sub
        
        Public Property Id_Perfil As Integer
            Get
                Return CType(Me(Me.tablePerfil_x_Usuario.Id_PerfilColumn),Integer)
            End Get
            Set
                Me(Me.tablePerfil_x_Usuario.Id_PerfilColumn) = value
            End Set
        End Property
        
        Public Property Id_Usuario As String
            Get
                Return CType(Me(Me.tablePerfil_x_Usuario.Id_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablePerfil_x_Usuario.Id_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Id_PerUser As Integer
            Get
                Return CType(Me(Me.tablePerfil_x_Usuario.Id_PerUserColumn),Integer)
            End Get
            Set
                Me(Me.tablePerfil_x_Usuario.Id_PerUserColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Perfil_x_UsuarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Perfil_x_UsuarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Perfil_x_UsuarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Perfil_x_UsuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PerfilDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Perfil As DataColumn
        
        Private columnNombre_Perfil As DataColumn
        
        Friend Sub New()
            MyBase.New("Perfil")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_PerfilColumn As DataColumn
            Get
                Return Me.columnId_Perfil
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_PerfilColumn As DataColumn
            Get
                Return Me.columnNombre_Perfil
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PerfilRow
            Get
                Return CType(Me.Rows(index),PerfilRow)
            End Get
        End Property
        
        Public Event PerfilRowChanged As PerfilRowChangeEventHandler
        
        Public Event PerfilRowChanging As PerfilRowChangeEventHandler
        
        Public Event PerfilRowDeleted As PerfilRowChangeEventHandler
        
        Public Event PerfilRowDeleting As PerfilRowChangeEventHandler
        
        Public Overloads Sub AddPerfilRow(ByVal row As PerfilRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPerfilRow(ByVal Nombre_Perfil As String) As PerfilRow
            Dim rowPerfilRow As PerfilRow = CType(Me.NewRow,PerfilRow)
            rowPerfilRow.ItemArray = New Object() {Nothing, Nombre_Perfil}
            Me.Rows.Add(rowPerfilRow)
            Return rowPerfilRow
        End Function
        
        Public Function FindById_Perfil(ByVal Id_Perfil As Integer) As PerfilRow
            Return CType(Me.Rows.Find(New Object() {Id_Perfil}),PerfilRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PerfilDataTable = CType(MyBase.Clone,PerfilDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PerfilDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Perfil = Me.Columns("Id_Perfil")
            Me.columnNombre_Perfil = Me.Columns("Nombre_Perfil")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Perfil = New DataColumn("Id_Perfil", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Perfil)
            Me.columnNombre_Perfil = New DataColumn("Nombre_Perfil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_Perfil)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Perfil}, true))
            Me.columnId_Perfil.AutoIncrement = true
            Me.columnId_Perfil.AllowDBNull = false
            Me.columnId_Perfil.ReadOnly = true
            Me.columnId_Perfil.Unique = true
            Me.columnNombre_Perfil.AllowDBNull = false
        End Sub
        
        Public Function NewPerfilRow() As PerfilRow
            Return CType(Me.NewRow,PerfilRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PerfilRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PerfilRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PerfilRowChangedEvent) Is Nothing) Then
                RaiseEvent PerfilRowChanged(Me, New PerfilRowChangeEvent(CType(e.Row,PerfilRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PerfilRowChangingEvent) Is Nothing) Then
                RaiseEvent PerfilRowChanging(Me, New PerfilRowChangeEvent(CType(e.Row,PerfilRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PerfilRowDeletedEvent) Is Nothing) Then
                RaiseEvent PerfilRowDeleted(Me, New PerfilRowChangeEvent(CType(e.Row,PerfilRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PerfilRowDeletingEvent) Is Nothing) Then
                RaiseEvent PerfilRowDeleting(Me, New PerfilRowChangeEvent(CType(e.Row,PerfilRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePerfilRow(ByVal row As PerfilRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PerfilRow
        Inherits DataRow
        
        Private tablePerfil As PerfilDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePerfil = CType(Me.Table,PerfilDataTable)
        End Sub
        
        Public Property Id_Perfil As Integer
            Get
                Return CType(Me(Me.tablePerfil.Id_PerfilColumn),Integer)
            End Get
            Set
                Me(Me.tablePerfil.Id_PerfilColumn) = value
            End Set
        End Property
        
        Public Property Nombre_Perfil As String
            Get
                Return CType(Me(Me.tablePerfil.Nombre_PerfilColumn),String)
            End Get
            Set
                Me(Me.tablePerfil.Nombre_PerfilColumn) = value
            End Set
        End Property
        
        Public Function GetPerfil_x_ModuloRows() As Perfil_x_ModuloRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PerfilPerfil_x_Modulo")),Perfil_x_ModuloRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PerfilRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PerfilRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PerfilRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PerfilRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModulosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_modulo As DataColumn
        
        Private columnModulo_Nombre_Interno As DataColumn
        
        Private columnModulo_Nombre As DataColumn
        
        Private columnSoftware As DataColumn
        
        Private columnGrupo As DataColumn
        
        Friend Sub New()
            MyBase.New("Modulos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_moduloColumn As DataColumn
            Get
                Return Me.columnId_modulo
            End Get
        End Property
        
        Friend ReadOnly Property Modulo_Nombre_InternoColumn As DataColumn
            Get
                Return Me.columnModulo_Nombre_Interno
            End Get
        End Property
        
        Friend ReadOnly Property Modulo_NombreColumn As DataColumn
            Get
                Return Me.columnModulo_Nombre
            End Get
        End Property
        
        Friend ReadOnly Property SoftwareColumn As DataColumn
            Get
                Return Me.columnSoftware
            End Get
        End Property
        
        Friend ReadOnly Property GrupoColumn As DataColumn
            Get
                Return Me.columnGrupo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ModulosRow
            Get
                Return CType(Me.Rows(index),ModulosRow)
            End Get
        End Property
        
        Public Event ModulosRowChanged As ModulosRowChangeEventHandler
        
        Public Event ModulosRowChanging As ModulosRowChangeEventHandler
        
        Public Event ModulosRowDeleted As ModulosRowChangeEventHandler
        
        Public Event ModulosRowDeleting As ModulosRowChangeEventHandler
        
        Public Overloads Sub AddModulosRow(ByVal row As ModulosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddModulosRow(ByVal Modulo_Nombre_Interno As String, ByVal Modulo_Nombre As String, ByVal Software As Integer, ByVal Grupo As String) As ModulosRow
            Dim rowModulosRow As ModulosRow = CType(Me.NewRow,ModulosRow)
            rowModulosRow.ItemArray = New Object() {Nothing, Modulo_Nombre_Interno, Modulo_Nombre, Software, Grupo}
            Me.Rows.Add(rowModulosRow)
            Return rowModulosRow
        End Function
        
        Public Function FindById_modulo(ByVal Id_modulo As Integer) As ModulosRow
            Return CType(Me.Rows.Find(New Object() {Id_modulo}),ModulosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ModulosDataTable = CType(MyBase.Clone,ModulosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ModulosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_modulo = Me.Columns("Id_modulo")
            Me.columnModulo_Nombre_Interno = Me.Columns("Modulo_Nombre_Interno")
            Me.columnModulo_Nombre = Me.Columns("Modulo_Nombre")
            Me.columnSoftware = Me.Columns("Software")
            Me.columnGrupo = Me.Columns("Grupo")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_modulo = New DataColumn("Id_modulo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_modulo)
            Me.columnModulo_Nombre_Interno = New DataColumn("Modulo_Nombre_Interno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModulo_Nombre_Interno)
            Me.columnModulo_Nombre = New DataColumn("Modulo_Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModulo_Nombre)
            Me.columnSoftware = New DataColumn("Software", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoftware)
            Me.columnGrupo = New DataColumn("Grupo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrupo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_modulo}, true))
            Me.columnId_modulo.AutoIncrement = true
            Me.columnId_modulo.AllowDBNull = false
            Me.columnId_modulo.ReadOnly = true
            Me.columnId_modulo.Unique = true
            Me.columnModulo_Nombre_Interno.AllowDBNull = false
            Me.columnModulo_Nombre.AllowDBNull = false
            Me.columnSoftware.AllowDBNull = false
        End Sub
        
        Public Function NewModulosRow() As ModulosRow
            Return CType(Me.NewRow,ModulosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ModulosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ModulosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ModulosRowChangedEvent) Is Nothing) Then
                RaiseEvent ModulosRowChanged(Me, New ModulosRowChangeEvent(CType(e.Row,ModulosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ModulosRowChangingEvent) Is Nothing) Then
                RaiseEvent ModulosRowChanging(Me, New ModulosRowChangeEvent(CType(e.Row,ModulosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ModulosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ModulosRowDeleted(Me, New ModulosRowChangeEvent(CType(e.Row,ModulosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ModulosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ModulosRowDeleting(Me, New ModulosRowChangeEvent(CType(e.Row,ModulosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveModulosRow(ByVal row As ModulosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModulosRow
        Inherits DataRow
        
        Private tableModulos As ModulosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableModulos = CType(Me.Table,ModulosDataTable)
        End Sub
        
        Public Property Id_modulo As Integer
            Get
                Return CType(Me(Me.tableModulos.Id_moduloColumn),Integer)
            End Get
            Set
                Me(Me.tableModulos.Id_moduloColumn) = value
            End Set
        End Property
        
        Public Property Modulo_Nombre_Interno As String
            Get
                Return CType(Me(Me.tableModulos.Modulo_Nombre_InternoColumn),String)
            End Get
            Set
                Me(Me.tableModulos.Modulo_Nombre_InternoColumn) = value
            End Set
        End Property
        
        Public Property Modulo_Nombre As String
            Get
                Return CType(Me(Me.tableModulos.Modulo_NombreColumn),String)
            End Get
            Set
                Me(Me.tableModulos.Modulo_NombreColumn) = value
            End Set
        End Property
        
        Public Property Software As Integer
            Get
                Return CType(Me(Me.tableModulos.SoftwareColumn),Integer)
            End Get
            Set
                Me(Me.tableModulos.SoftwareColumn) = value
            End Set
        End Property
        
        Public Property Grupo As String
            Get
                Try 
                    Return CType(Me(Me.tableModulos.GrupoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModulos.GrupoColumn) = value
            End Set
        End Property
        
        Public Function IsGrupoNull() As Boolean
            Return Me.IsNull(Me.tableModulos.GrupoColumn)
        End Function
        
        Public Sub SetGrupoNull()
            Me(Me.tableModulos.GrupoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModulosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ModulosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ModulosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ModulosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Perfil_x_ModuloDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Perfil As DataColumn
        
        Private columnId_Modulo As DataColumn
        
        Private columnAccion_Ejecucion As DataColumn
        
        Private columnAccion_Actualizacion As DataColumn
        
        Private columnAccion_Eliminacion As DataColumn
        
        Private columnAccion_Busqueda As DataColumn
        
        Private columnAccion_Impresion As DataColumn
        
        Private columnAccion_Opcion As DataColumn
        
        Private columnId_Modulo_Perfil As DataColumn
        
        Private columnMenu As DataColumn
        
        Friend Sub New()
            MyBase.New("Perfil_x_Modulo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_PerfilColumn As DataColumn
            Get
                Return Me.columnId_Perfil
            End Get
        End Property
        
        Friend ReadOnly Property Id_ModuloColumn As DataColumn
            Get
                Return Me.columnId_Modulo
            End Get
        End Property
        
        Friend ReadOnly Property Accion_EjecucionColumn As DataColumn
            Get
                Return Me.columnAccion_Ejecucion
            End Get
        End Property
        
        Friend ReadOnly Property Accion_ActualizacionColumn As DataColumn
            Get
                Return Me.columnAccion_Actualizacion
            End Get
        End Property
        
        Friend ReadOnly Property Accion_EliminacionColumn As DataColumn
            Get
                Return Me.columnAccion_Eliminacion
            End Get
        End Property
        
        Friend ReadOnly Property Accion_BusquedaColumn As DataColumn
            Get
                Return Me.columnAccion_Busqueda
            End Get
        End Property
        
        Friend ReadOnly Property Accion_ImpresionColumn As DataColumn
            Get
                Return Me.columnAccion_Impresion
            End Get
        End Property
        
        Friend ReadOnly Property Accion_OpcionColumn As DataColumn
            Get
                Return Me.columnAccion_Opcion
            End Get
        End Property
        
        Friend ReadOnly Property Id_Modulo_PerfilColumn As DataColumn
            Get
                Return Me.columnId_Modulo_Perfil
            End Get
        End Property
        
        Friend ReadOnly Property MenuColumn As DataColumn
            Get
                Return Me.columnMenu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Perfil_x_ModuloRow
            Get
                Return CType(Me.Rows(index),Perfil_x_ModuloRow)
            End Get
        End Property
        
        Public Event Perfil_x_ModuloRowChanged As Perfil_x_ModuloRowChangeEventHandler
        
        Public Event Perfil_x_ModuloRowChanging As Perfil_x_ModuloRowChangeEventHandler
        
        Public Event Perfil_x_ModuloRowDeleted As Perfil_x_ModuloRowChangeEventHandler
        
        Public Event Perfil_x_ModuloRowDeleting As Perfil_x_ModuloRowChangeEventHandler
        
        Public Overloads Sub AddPerfil_x_ModuloRow(ByVal row As Perfil_x_ModuloRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPerfil_x_ModuloRow(ByVal parentPerfilRowByPerfilPerfil_x_Modulo As PerfilRow, ByVal Id_Modulo As Integer, ByVal Accion_Ejecucion As Boolean, ByVal Accion_Actualizacion As Boolean, ByVal Accion_Eliminacion As Boolean, ByVal Accion_Busqueda As Boolean, ByVal Accion_Impresion As Boolean, ByVal Accion_Opcion As Boolean, ByVal Menu As String) As Perfil_x_ModuloRow
            Dim rowPerfil_x_ModuloRow As Perfil_x_ModuloRow = CType(Me.NewRow,Perfil_x_ModuloRow)
            rowPerfil_x_ModuloRow.ItemArray = New Object() {parentPerfilRowByPerfilPerfil_x_Modulo(0), Id_Modulo, Accion_Ejecucion, Accion_Actualizacion, Accion_Eliminacion, Accion_Busqueda, Accion_Impresion, Accion_Opcion, Nothing, Menu}
            Me.Rows.Add(rowPerfil_x_ModuloRow)
            Return rowPerfil_x_ModuloRow
        End Function
        
        Public Function FindById_Modulo_Perfil(ByVal Id_Modulo_Perfil As Integer) As Perfil_x_ModuloRow
            Return CType(Me.Rows.Find(New Object() {Id_Modulo_Perfil}),Perfil_x_ModuloRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Perfil_x_ModuloDataTable = CType(MyBase.Clone,Perfil_x_ModuloDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Perfil_x_ModuloDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Perfil = Me.Columns("Id_Perfil")
            Me.columnId_Modulo = Me.Columns("Id_Modulo")
            Me.columnAccion_Ejecucion = Me.Columns("Accion_Ejecucion")
            Me.columnAccion_Actualizacion = Me.Columns("Accion_Actualizacion")
            Me.columnAccion_Eliminacion = Me.Columns("Accion_Eliminacion")
            Me.columnAccion_Busqueda = Me.Columns("Accion_Busqueda")
            Me.columnAccion_Impresion = Me.Columns("Accion_Impresion")
            Me.columnAccion_Opcion = Me.Columns("Accion_Opcion")
            Me.columnId_Modulo_Perfil = Me.Columns("Id_Modulo_Perfil")
            Me.columnMenu = Me.Columns("Menu")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Perfil = New DataColumn("Id_Perfil", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Perfil)
            Me.columnId_Modulo = New DataColumn("Id_Modulo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Modulo)
            Me.columnAccion_Ejecucion = New DataColumn("Accion_Ejecucion", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccion_Ejecucion)
            Me.columnAccion_Actualizacion = New DataColumn("Accion_Actualizacion", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccion_Actualizacion)
            Me.columnAccion_Eliminacion = New DataColumn("Accion_Eliminacion", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccion_Eliminacion)
            Me.columnAccion_Busqueda = New DataColumn("Accion_Busqueda", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccion_Busqueda)
            Me.columnAccion_Impresion = New DataColumn("Accion_Impresion", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccion_Impresion)
            Me.columnAccion_Opcion = New DataColumn("Accion_Opcion", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccion_Opcion)
            Me.columnId_Modulo_Perfil = New DataColumn("Id_Modulo_Perfil", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Modulo_Perfil)
            Me.columnMenu = New DataColumn("Menu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMenu)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Modulo_Perfil}, true))
            Me.columnId_Perfil.AllowDBNull = false
            Me.columnId_Modulo.AllowDBNull = false
            Me.columnAccion_Ejecucion.AllowDBNull = false
            Me.columnAccion_Actualizacion.AllowDBNull = false
            Me.columnAccion_Eliminacion.AllowDBNull = false
            Me.columnAccion_Busqueda.AllowDBNull = false
            Me.columnAccion_Impresion.AllowDBNull = false
            Me.columnAccion_Opcion.AllowDBNull = false
            Me.columnId_Modulo_Perfil.AutoIncrement = true
            Me.columnId_Modulo_Perfil.AllowDBNull = false
            Me.columnId_Modulo_Perfil.ReadOnly = true
            Me.columnId_Modulo_Perfil.Unique = true
            Me.columnMenu.AllowDBNull = false
        End Sub
        
        Public Function NewPerfil_x_ModuloRow() As Perfil_x_ModuloRow
            Return CType(Me.NewRow,Perfil_x_ModuloRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Perfil_x_ModuloRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Perfil_x_ModuloRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Perfil_x_ModuloRowChangedEvent) Is Nothing) Then
                RaiseEvent Perfil_x_ModuloRowChanged(Me, New Perfil_x_ModuloRowChangeEvent(CType(e.Row,Perfil_x_ModuloRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Perfil_x_ModuloRowChangingEvent) Is Nothing) Then
                RaiseEvent Perfil_x_ModuloRowChanging(Me, New Perfil_x_ModuloRowChangeEvent(CType(e.Row,Perfil_x_ModuloRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Perfil_x_ModuloRowDeletedEvent) Is Nothing) Then
                RaiseEvent Perfil_x_ModuloRowDeleted(Me, New Perfil_x_ModuloRowChangeEvent(CType(e.Row,Perfil_x_ModuloRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Perfil_x_ModuloRowDeletingEvent) Is Nothing) Then
                RaiseEvent Perfil_x_ModuloRowDeleting(Me, New Perfil_x_ModuloRowChangeEvent(CType(e.Row,Perfil_x_ModuloRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePerfil_x_ModuloRow(ByVal row As Perfil_x_ModuloRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Perfil_x_ModuloRow
        Inherits DataRow
        
        Private tablePerfil_x_Modulo As Perfil_x_ModuloDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePerfil_x_Modulo = CType(Me.Table,Perfil_x_ModuloDataTable)
        End Sub
        
        Public Property Id_Perfil As Integer
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.Id_PerfilColumn),Integer)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.Id_PerfilColumn) = value
            End Set
        End Property
        
        Public Property Id_Modulo As Integer
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.Id_ModuloColumn),Integer)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.Id_ModuloColumn) = value
            End Set
        End Property
        
        Public Property Accion_Ejecucion As Boolean
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.Accion_EjecucionColumn),Boolean)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.Accion_EjecucionColumn) = value
            End Set
        End Property
        
        Public Property Accion_Actualizacion As Boolean
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.Accion_ActualizacionColumn),Boolean)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.Accion_ActualizacionColumn) = value
            End Set
        End Property
        
        Public Property Accion_Eliminacion As Boolean
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.Accion_EliminacionColumn),Boolean)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.Accion_EliminacionColumn) = value
            End Set
        End Property
        
        Public Property Accion_Busqueda As Boolean
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.Accion_BusquedaColumn),Boolean)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.Accion_BusquedaColumn) = value
            End Set
        End Property
        
        Public Property Accion_Impresion As Boolean
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.Accion_ImpresionColumn),Boolean)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.Accion_ImpresionColumn) = value
            End Set
        End Property
        
        Public Property Accion_Opcion As Boolean
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.Accion_OpcionColumn),Boolean)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.Accion_OpcionColumn) = value
            End Set
        End Property
        
        Public Property Id_Modulo_Perfil As Integer
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.Id_Modulo_PerfilColumn),Integer)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.Id_Modulo_PerfilColumn) = value
            End Set
        End Property
        
        Public Property Menu As String
            Get
                Return CType(Me(Me.tablePerfil_x_Modulo.MenuColumn),String)
            End Get
            Set
                Me(Me.tablePerfil_x_Modulo.MenuColumn) = value
            End Set
        End Property
        
        Public Property PerfilRow As PerfilRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PerfilPerfil_x_Modulo")),PerfilRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PerfilPerfil_x_Modulo"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Perfil_x_ModuloRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Perfil_x_ModuloRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Perfil_x_ModuloRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Perfil_x_ModuloRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Modulos1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_modulo As DataColumn
        
        Private columnModulo_Nombre_Interno As DataColumn
        
        Private columnModulo_Nombre As DataColumn
        
        Private columnSoftware As DataColumn
        
        Private columnGrupo As DataColumn
        
        Friend Sub New()
            MyBase.New("Modulos1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_moduloColumn As DataColumn
            Get
                Return Me.columnId_modulo
            End Get
        End Property
        
        Friend ReadOnly Property Modulo_Nombre_InternoColumn As DataColumn
            Get
                Return Me.columnModulo_Nombre_Interno
            End Get
        End Property
        
        Friend ReadOnly Property Modulo_NombreColumn As DataColumn
            Get
                Return Me.columnModulo_Nombre
            End Get
        End Property
        
        Friend ReadOnly Property SoftwareColumn As DataColumn
            Get
                Return Me.columnSoftware
            End Get
        End Property
        
        Friend ReadOnly Property GrupoColumn As DataColumn
            Get
                Return Me.columnGrupo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Modulos1Row
            Get
                Return CType(Me.Rows(index),Modulos1Row)
            End Get
        End Property
        
        Public Event Modulos1RowChanged As Modulos1RowChangeEventHandler
        
        Public Event Modulos1RowChanging As Modulos1RowChangeEventHandler
        
        Public Event Modulos1RowDeleted As Modulos1RowChangeEventHandler
        
        Public Event Modulos1RowDeleting As Modulos1RowChangeEventHandler
        
        Public Overloads Sub AddModulos1Row(ByVal row As Modulos1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddModulos1Row(ByVal Modulo_Nombre_Interno As String, ByVal Modulo_Nombre As String, ByVal Software As Integer, ByVal Grupo As String) As Modulos1Row
            Dim rowModulos1Row As Modulos1Row = CType(Me.NewRow,Modulos1Row)
            rowModulos1Row.ItemArray = New Object() {Nothing, Modulo_Nombre_Interno, Modulo_Nombre, Software, Grupo}
            Me.Rows.Add(rowModulos1Row)
            Return rowModulos1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Modulos1DataTable = CType(MyBase.Clone,Modulos1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Modulos1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_modulo = Me.Columns("Id_modulo")
            Me.columnModulo_Nombre_Interno = Me.Columns("Modulo_Nombre_Interno")
            Me.columnModulo_Nombre = Me.Columns("Modulo_Nombre")
            Me.columnSoftware = Me.Columns("Software")
            Me.columnGrupo = Me.Columns("Grupo")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_modulo = New DataColumn("Id_modulo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_modulo)
            Me.columnModulo_Nombre_Interno = New DataColumn("Modulo_Nombre_Interno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModulo_Nombre_Interno)
            Me.columnModulo_Nombre = New DataColumn("Modulo_Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModulo_Nombre)
            Me.columnSoftware = New DataColumn("Software", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoftware)
            Me.columnGrupo = New DataColumn("Grupo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrupo)
            Me.columnId_modulo.AutoIncrement = true
            Me.columnId_modulo.AllowDBNull = false
            Me.columnId_modulo.ReadOnly = true
            Me.columnModulo_Nombre_Interno.AllowDBNull = false
            Me.columnModulo_Nombre.AllowDBNull = false
            Me.columnSoftware.AllowDBNull = false
        End Sub
        
        Public Function NewModulos1Row() As Modulos1Row
            Return CType(Me.NewRow,Modulos1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Modulos1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Modulos1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Modulos1RowChangedEvent) Is Nothing) Then
                RaiseEvent Modulos1RowChanged(Me, New Modulos1RowChangeEvent(CType(e.Row,Modulos1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Modulos1RowChangingEvent) Is Nothing) Then
                RaiseEvent Modulos1RowChanging(Me, New Modulos1RowChangeEvent(CType(e.Row,Modulos1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Modulos1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Modulos1RowDeleted(Me, New Modulos1RowChangeEvent(CType(e.Row,Modulos1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Modulos1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Modulos1RowDeleting(Me, New Modulos1RowChangeEvent(CType(e.Row,Modulos1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveModulos1Row(ByVal row As Modulos1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Modulos1Row
        Inherits DataRow
        
        Private tableModulos1 As Modulos1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableModulos1 = CType(Me.Table,Modulos1DataTable)
        End Sub
        
        Public Property Id_modulo As Integer
            Get
                Return CType(Me(Me.tableModulos1.Id_moduloColumn),Integer)
            End Get
            Set
                Me(Me.tableModulos1.Id_moduloColumn) = value
            End Set
        End Property
        
        Public Property Modulo_Nombre_Interno As String
            Get
                Return CType(Me(Me.tableModulos1.Modulo_Nombre_InternoColumn),String)
            End Get
            Set
                Me(Me.tableModulos1.Modulo_Nombre_InternoColumn) = value
            End Set
        End Property
        
        Public Property Modulo_Nombre As String
            Get
                Return CType(Me(Me.tableModulos1.Modulo_NombreColumn),String)
            End Get
            Set
                Me(Me.tableModulos1.Modulo_NombreColumn) = value
            End Set
        End Property
        
        Public Property Software As Integer
            Get
                Return CType(Me(Me.tableModulos1.SoftwareColumn),Integer)
            End Get
            Set
                Me(Me.tableModulos1.SoftwareColumn) = value
            End Set
        End Property
        
        Public Property Grupo As String
            Get
                Try 
                    Return CType(Me(Me.tableModulos1.GrupoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModulos1.GrupoColumn) = value
            End Set
        End Property
        
        Public Function IsGrupoNull() As Boolean
            Return Me.IsNull(Me.tableModulos1.GrupoColumn)
        End Function
        
        Public Sub SetGrupoNull()
            Me(Me.tableModulos1.GrupoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Modulos1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Modulos1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Modulos1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Modulos1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
